diff --git a/diff.txt b/diff.txt
new file mode 100644
index 00000000..e69de29b
diff --git a/landscape/client/package/reporter.py b/landscape/client/package/reporter.py
index b784317b..8099172c 100644
--- a/landscape/client/package/reporter.py
+++ b/landscape/client/package/reporter.py
@@ -654,6 +654,43 @@ class PackageReporter(PackageTaskHandler):
         return False
 
     def _compute_packages_changes(self):  # noqa: max-complexity: 13
+        import cProfile
+        import pstats
+        from datetime import datetime
+        import psutil
+
+        profile = cProfile.Profile()
+        process = psutil.Process()
+        start_time = time.perf_counter()
+        start_cpu_times = process.cpu_times()
+        profile.enable()
+
+        result = self.compute_packages_change_inner()
+
+        time.sleep(0.1)
+
+        end_time = time.perf_counter()
+        end_cpu_times = process.cpu_times()
+
+        profile.disable()
+
+        elapsed_time = end_time - start_time
+
+        user_time = end_cpu_times.user - start_cpu_times.user
+        system_time = end_cpu_times.system - start_cpu_times.system
+        total_cpu_time = user_time + system_time
+
+        output_path = "/tmp/lib/landscape/client/result.txt"
+        with open(output_path, "a") as fp:
+            now = datetime.now()
+            fp.write(f"\n--------- Run on: {now.strftime('%Y-%m-%d %H:%M:%S')} ---------\n\n")
+            stats = pstats.Stats(profile, stream=fp)
+            stats.strip_dirs().sort_stats("cumulative").print_stats(10)
+            fp.write(f"CPU Time: {total_cpu_time}s\n")
+            fp.write(f"\n---------------------------------------------------------------\n")
+        return result
+
+    def compute_packages_change_inner(self):
         """Analyse changes in the universe of known packages.
 
         This method will verify if there are packages that:
@@ -679,6 +716,7 @@ class PackageReporter(PackageTaskHandler):
         @return: A deferred resulting in C{True} if package changes were
             detected with respect to the previous run, or C{False} otherwise.
         """
+
         self._facade.ensure_channels_reloaded()
 
         old_installed = set(self._store.get_installed())
@@ -698,53 +736,48 @@ class PackageReporter(PackageTaskHandler):
         backports_archive = "{}-backports".format(os_release_info["code-name"])
         security_archive = "{}-security".format(os_release_info["code-name"])
 
-        for package in self._facade.get_packages():
+        for package_version in self._facade.get_packages():
+            # Construct origin archives from the list of PackageFiles
+            # for the given package Version rather than calling
+            # the builtin package.origins. No need to construct
+            # an entire Origins object as only we want to check the archives.
+            # See /usr/lib/python3/dist-packages/apt/package.py
+            archives = [a[0].archive for a in package_version._cand.file_list]
+
             # Don't include package versions from the official backports
             # archive. The backports archive is enabled by default since
             # xenial with a pinning policy of 100. Ideally we would
             # support pinning, but we don't yet. In the mean time, we
             # ignore backports, so that packages don't get automatically
             # upgraded to the backports version.
-            backport_origins = [
-                origin
-                for origin in package.origins
-                if origin.archive == backports_archive
-            ]
-            if backport_origins and (
-                len(backport_origins) == len(package.origins)
-            ):
+            if all(archive == backports_archive for archive in archives):
                 # Ignore the version if it's only in the official
                 # backports archive. If it's somewhere else as well,
                 # e.g. a PPA, we assume it was added manually and the
                 # user wants to get updates from it.
                 continue
-            hash = self._facade.get_package_hash(package)
+            hash = self._facade.get_package_hash(package_version)
             id = self._store.get_hash_id(hash)
             if id is not None:
-                if self._facade.is_package_installed(package):
+                if self._facade.is_package_installed(package_version):
                     current_installed.add(id)
-                    if self._facade.is_package_available(package):
+                    if self._facade.is_package_available(package_version):
                         current_available.add(id)
-                    if self._facade.is_package_autoremovable(package):
+                    if self._facade.is_package_autoremovable(package_version):
                         current_autoremovable.add(id)
                 else:
                     current_available.add(id)
 
                 # Are there any packages that this package is an upgrade for?
-                if self._facade.is_package_upgrade(package):
+                if self._facade.is_package_upgrade(package_version):
                     current_upgrades.add(id)
 
                 # Is this package present in the security pocket?
-                security_origins = any(
-                    origin
-                    for origin in package.origins
-                    if origin.archive == security_archive
-                )
-                if security_origins:
+                if security_archive in archives:
                     current_security.add(id)
 
-        for package in self._facade.get_locked_packages():
-            hash = self._facade.get_package_hash(package)
+        for package_version in self._facade.get_locked_packages():
+            hash = self._facade.get_package_hash(package_version)
             id = self._store.get_hash_id(hash)
             if id is not None:
                 current_locked.add(id)
diff --git a/landscape/client/package/tests/test_reporter.py b/landscape/client/package/tests/test_reporter.py
index 607f2cd9..11535e26 100644
--- a/landscape/client/package/tests/test_reporter.py
+++ b/landscape/client/package/tests/test_reporter.py
@@ -1262,6 +1262,24 @@ class PackageReporterAptTest(LandscapeTest):
         result = self.reporter.detect_packages_changes()
         return result.addCallback(got_result)
 
+    def test_detect_packages_changes_package_origins_not_called(self):
+        """
+        Archive info is extracted directly from the package versions
+        and the apt.package.Version.origins property is not called
+        """
+        with mock.patch("apt.package.Version.origins") as version_origins_mock:
+            self.successResultOf(self.reporter.detect_packages_changes())
+        version_origins_mock.assert_not_called()
+
+    def test_detect_packages_changes_origins_not_created(self):
+        """
+        Archive info is extracted directly from the package versions
+        and no Origins are created (find_index is not called)
+        """
+        with mock.patch("apt.package.Origin.__init__") as origin_mock:
+            self.successResultOf(self.reporter.detect_packages_changes())
+        origin_mock.assert_not_called()
+
     def test_detect_packages_changes_with_backports_others(self):
         """
         Packages coming from backport archives that aren't named like
diff --git a/root-client.conf b/root-client.conf
index a0efcdbc..b8cacbed 100644
--- a/root-client.conf
+++ b/root-client.conf
@@ -1,14 +1,20 @@
 [client]
 bus = system
-computer_title = John's PC
+computer_title = Test Noble
 account_name = onward
-registration_key =
-url = http://localhost:8080/message-system
-package_hash_id_url = http://localhost:8080/hash-id-databases
-data_path = /tmp/landscape-root
-log_dir = /tmp/landscape-root
+registration_key = world
+exchange_interval = 200
+url = http://10.15.97.7:8080/message-system
+ping_url = http://10.15.97.7:8081/ping
+data_path = /tmp/lib/landscape/client/
+package_hash_id_url = http://10.15.97.7:8080/hash-id-databases
+pid_file = /tmp/run/landscape/landscape-client.pid
+log_dir = /tmp/log/landscape/
 log_level = debug
-pid_file = /tmp/landscape-root/landscape-client.pid
-ping_url = http://localhost:8080/ping
-include_manager_plugins = ScriptExecution
-script_users = www-data, nobody, root
+manager_plugins = ALL
+monitor_plugins = ALL
+package_monitor_interval = 1000
+apt_update_interval = 300
+script_users = ALL
+ping_interval = 10
+flush_interval = 200
